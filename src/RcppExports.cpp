// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// est_ability_4pm_nr_itempool_cpp
double est_ability_4pm_nr_itempool_cpp(Rcpp::NumericVector resp, Rcpp::S4 ip, Rcpp::NumericVector theta_range, double criterion, Rcpp::Nullable<Rcpp::NumericVector> initial_estimates);
RcppExport SEXP _irt_est_ability_4pm_nr_itempool_cpp(SEXP respSEXP, SEXP ipSEXP, SEXP theta_rangeSEXP, SEXP criterionSEXP, SEXP initial_estimatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta_range(theta_rangeSEXP);
    Rcpp::traits::input_parameter< double >::type criterion(criterionSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type initial_estimates(initial_estimatesSEXP);
    rcpp_result_gen = Rcpp::wrap(est_ability_4pm_nr_itempool_cpp(resp, ip, theta_range, criterion, initial_estimates));
    return rcpp_result_gen;
END_RCPP
}
// est_ability_4pm_nr_response_cpp
double est_ability_4pm_nr_response_cpp(Rcpp::S4 resp, Rcpp::S4 ip, Rcpp::NumericVector theta_range, double criterion, Rcpp::Nullable<Rcpp::NumericVector> initial_estimates);
RcppExport SEXP _irt_est_ability_4pm_nr_response_cpp(SEXP respSEXP, SEXP ipSEXP, SEXP theta_rangeSEXP, SEXP criterionSEXP, SEXP initial_estimatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta_range(theta_rangeSEXP);
    Rcpp::traits::input_parameter< double >::type criterion(criterionSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type initial_estimates(initial_estimatesSEXP);
    rcpp_result_gen = Rcpp::wrap(est_ability_4pm_nr_response_cpp(resp, ip, theta_range, criterion, initial_estimates));
    return rcpp_result_gen;
END_RCPP
}
// est_ability_eap_single_examinee_cpp
Rcpp::List est_ability_eap_single_examinee_cpp(Rcpp::NumericVector resp, Rcpp::S4 ip, Rcpp::NumericVector theta_range, int no_of_quadrature, Rcpp::String prior_dist, Rcpp::NumericVector prior_par);
RcppExport SEXP _irt_est_ability_eap_single_examinee_cpp(SEXP respSEXP, SEXP ipSEXP, SEXP theta_rangeSEXP, SEXP no_of_quadratureSEXP, SEXP prior_distSEXP, SEXP prior_parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta_range(theta_rangeSEXP);
    Rcpp::traits::input_parameter< int >::type no_of_quadrature(no_of_quadratureSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_dist(prior_distSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prior_par(prior_parSEXP);
    rcpp_result_gen = Rcpp::wrap(est_ability_eap_single_examinee_cpp(resp, ip, theta_range, no_of_quadrature, prior_dist, prior_par));
    return rcpp_result_gen;
END_RCPP
}
// est_ability_eap_cpp
Rcpp::List est_ability_eap_cpp(Rcpp::NumericMatrix resp, Rcpp::S4 ip, Rcpp::NumericVector theta_range, int no_of_quadrature, Rcpp::String prior_dist, Rcpp::NumericVector prior_par);
RcppExport SEXP _irt_est_ability_eap_cpp(SEXP respSEXP, SEXP ipSEXP, SEXP theta_rangeSEXP, SEXP no_of_quadratureSEXP, SEXP prior_distSEXP, SEXP prior_parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta_range(theta_rangeSEXP);
    Rcpp::traits::input_parameter< int >::type no_of_quadrature(no_of_quadratureSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_dist(prior_distSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prior_par(prior_parSEXP);
    rcpp_result_gen = Rcpp::wrap(est_ability_eap_cpp(resp, ip, theta_range, no_of_quadrature, prior_dist, prior_par));
    return rcpp_result_gen;
END_RCPP
}
// est_ability_eap_response_set_cpp
Rcpp::List est_ability_eap_response_set_cpp(Rcpp::S4 resp_set, Rcpp::S4 ip, Rcpp::NumericVector theta_range, int no_of_quadrature, std::string prior_dist, Rcpp::NumericVector prior_par);
RcppExport SEXP _irt_est_ability_eap_response_set_cpp(SEXP resp_setSEXP, SEXP ipSEXP, SEXP theta_rangeSEXP, SEXP no_of_quadratureSEXP, SEXP prior_distSEXP, SEXP prior_parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp_set(resp_setSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta_range(theta_rangeSEXP);
    Rcpp::traits::input_parameter< int >::type no_of_quadrature(no_of_quadratureSEXP);
    Rcpp::traits::input_parameter< std::string >::type prior_dist(prior_distSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prior_par(prior_parSEXP);
    rcpp_result_gen = Rcpp::wrap(est_ability_eap_response_set_cpp(resp_set, ip, theta_range, no_of_quadrature, prior_dist, prior_par));
    return rcpp_result_gen;
END_RCPP
}
// est_ability_owen_item_cpp
Rcpp::List est_ability_owen_item_cpp(Rcpp::S4 item, int resp, double m0, double v0);
RcppExport SEXP _irt_est_ability_owen_item_cpp(SEXP itemSEXP, SEXP respSEXP, SEXP m0SEXP, SEXP v0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< int >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    rcpp_result_gen = Rcpp::wrap(est_ability_owen_item_cpp(item, resp, m0, v0));
    return rcpp_result_gen;
END_RCPP
}
// est_ability_owen_cpp
Rcpp::List est_ability_owen_cpp(Rcpp::S4 ip, Rcpp::NumericVector resp, double m0, double v0);
RcppExport SEXP _irt_est_ability_owen_cpp(SEXP ipSEXP, SEXP respSEXP, SEXP m0SEXP, SEXP v0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    rcpp_result_gen = Rcpp::wrap(est_ability_owen_cpp(ip, resp, m0, v0));
    return rcpp_result_gen;
END_RCPP
}
// est_ability_optim_response_cpp
double est_ability_optim_response_cpp(Rcpp::S4 resp, Rcpp::List ip_list, Rcpp::NumericVector theta_range, double tol);
RcppExport SEXP _irt_est_ability_optim_response_cpp(SEXP respSEXP, SEXP ip_listSEXP, SEXP theta_rangeSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ip_list(ip_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta_range(theta_rangeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(est_ability_optim_response_cpp(resp, ip_list, theta_range, tol));
    return rcpp_result_gen;
END_RCPP
}
// get_remaining_items
Rcpp::S4 get_remaining_items(Rcpp::List cd, Rcpp::List est_history, Rcpp::List additional_args);
RcppExport SEXP _irt_get_remaining_items(SEXP cdSEXP, SEXP est_historySEXP, SEXP additional_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type est_history(est_historySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type additional_args(additional_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_remaining_items(cd, est_history, additional_args));
    return rcpp_result_gen;
END_RCPP
}
// get_administered_items_cpp
Rcpp::S4 get_administered_items_cpp(Rcpp::List est_history);
RcppExport SEXP _irt_get_administered_items_cpp(SEXP est_historySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type est_history(est_historySEXP);
    rcpp_result_gen = Rcpp::wrap(get_administered_items_cpp(est_history));
    return rcpp_result_gen;
END_RCPP
}
// get_response_categories
Rcpp::IntegerVector get_response_categories(Rcpp::S4 item);
RcppExport SEXP _irt_get_response_categories(SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(get_response_categories(item));
    return rcpp_result_gen;
END_RCPP
}
// loglik_est_history
double loglik_est_history(Rcpp::List est_history, double theta, bool calculate_loglik);
RcppExport SEXP _irt_loglik_est_history(SEXP est_historySEXP, SEXP thetaSEXP, SEXP calculate_loglikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type est_history(est_historySEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type calculate_loglik(calculate_loglikSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_est_history(est_history, theta, calculate_loglik));
    return rcpp_result_gen;
END_RCPP
}
// select_next_item_fisher_max_info_cpp
Rcpp::List select_next_item_fisher_max_info_cpp(Rcpp::List cd, Rcpp::List est_history, Rcpp::List additional_args);
RcppExport SEXP _irt_select_next_item_fisher_max_info_cpp(SEXP cdSEXP, SEXP est_historySEXP, SEXP additional_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type est_history(est_historySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type additional_args(additional_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(select_next_item_fisher_max_info_cpp(cd, est_history, additional_args));
    return rcpp_result_gen;
END_RCPP
}
// select_next_item_fmi_cpp
Rcpp::S4 select_next_item_fmi_cpp(double theta, Rcpp::S4 ip, int randomesqueN);
RcppExport SEXP _irt_select_next_item_fmi_cpp(SEXP thetaSEXP, SEXP ipSEXP, SEXP randomesqueNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< int >::type randomesqueN(randomesqueNSEXP);
    rcpp_result_gen = Rcpp::wrap(select_next_item_fmi_cpp(theta, ip, randomesqueN));
    return rcpp_result_gen;
END_RCPP
}
// calculate_epv_cpp
double calculate_epv_cpp(std::string var_calc_method, NumericVector current_resp, Rcpp::NumericVector previous_resp, double current_ability_est, Rcpp::S4 candidate_item, Rcpp::S4 administered_ip, double prior_mean, double prior_var);
RcppExport SEXP _irt_calculate_epv_cpp(SEXP var_calc_methodSEXP, SEXP current_respSEXP, SEXP previous_respSEXP, SEXP current_ability_estSEXP, SEXP candidate_itemSEXP, SEXP administered_ipSEXP, SEXP prior_meanSEXP, SEXP prior_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type var_calc_method(var_calc_methodSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type current_resp(current_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type previous_resp(previous_respSEXP);
    Rcpp::traits::input_parameter< double >::type current_ability_est(current_ability_estSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type candidate_item(candidate_itemSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type administered_ip(administered_ipSEXP);
    Rcpp::traits::input_parameter< double >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var(prior_varSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_epv_cpp(var_calc_method, current_resp, previous_resp, current_ability_est, candidate_item, administered_ip, prior_mean, prior_var));
    return rcpp_result_gen;
END_RCPP
}
// select_next_item_mepv_cpp
Rcpp::List select_next_item_mepv_cpp(Rcpp::List cd, Rcpp::List est_history, Rcpp::List additional_args);
RcppExport SEXP _irt_select_next_item_mepv_cpp(SEXP cdSEXP, SEXP est_historySEXP, SEXP additional_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type est_history(est_historySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type additional_args(additional_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(select_next_item_mepv_cpp(cd, est_history, additional_args));
    return rcpp_result_gen;
END_RCPP
}
// apply_exposure_control_cpp
Rcpp::List apply_exposure_control_cpp(Rcpp::List cd, Rcpp::List est_history, Rcpp::List remaining_ip_list, Rcpp::List additional_args);
RcppExport SEXP _irt_apply_exposure_control_cpp(SEXP cdSEXP, SEXP est_historySEXP, SEXP remaining_ip_listSEXP, SEXP additional_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type est_history(est_historySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type remaining_ip_list(remaining_ip_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type additional_args(additional_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_exposure_control_cpp(cd, est_history, remaining_ip_list, additional_args));
    return rcpp_result_gen;
END_RCPP
}
// select_next_item_cpp
Rcpp::List select_next_item_cpp(Rcpp::List cd, Rcpp::List est_history, Rcpp::List additional_args);
RcppExport SEXP _irt_select_next_item_cpp(SEXP cdSEXP, SEXP est_historySEXP, SEXP additional_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type est_history(est_historySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type additional_args(additional_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(select_next_item_cpp(cd, est_history, additional_args));
    return rcpp_result_gen;
END_RCPP
}
// cat_sim_single_cpp
Rcpp::List cat_sim_single_cpp(Rcpp::List true_ability, Rcpp::List cd);
RcppExport SEXP _irt_cat_sim_single_cpp(SEXP true_abilitySEXP, SEXP cdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type true_ability(true_abilitySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cd(cdSEXP);
    rcpp_result_gen = Rcpp::wrap(cat_sim_single_cpp(true_ability, cd));
    return rcpp_result_gen;
END_RCPP
}
// cat_sim_cpp
Rcpp::List cat_sim_cpp(Rcpp::List true_ability, Rcpp::List cd, int verbose);
RcppExport SEXP _irt_cat_sim_cpp(SEXP true_abilitySEXP, SEXP cdSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type true_ability(true_abilitySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(cat_sim_cpp(true_ability, cd, verbose));
    return rcpp_result_gen;
END_RCPP
}
// generate_cat_resp_cpp
Rcpp::List generate_cat_resp_cpp(Rcpp::List true_ability, Rcpp::List cd, Rcpp::List est_history, Rcpp::List additional_args);
RcppExport SEXP _irt_generate_cat_resp_cpp(SEXP true_abilitySEXP, SEXP cdSEXP, SEXP est_historySEXP, SEXP additional_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type true_ability(true_abilitySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type est_history(est_historySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type additional_args(additional_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_cat_resp_cpp(true_ability, cd, est_history, additional_args));
    return rcpp_result_gen;
END_RCPP
}
// est_ability_cat_cpp
Rcpp::List est_ability_cat_cpp(Rcpp::List true_ability, Rcpp::List cd, Rcpp::List est_history, Rcpp::List additional_args, bool last_estimate);
RcppExport SEXP _irt_est_ability_cat_cpp(SEXP true_abilitySEXP, SEXP cdSEXP, SEXP est_historySEXP, SEXP additional_argsSEXP, SEXP last_estimateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type true_ability(true_abilitySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type est_history(est_historySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type additional_args(additional_argsSEXP);
    Rcpp::traits::input_parameter< bool >::type last_estimate(last_estimateSEXP);
    rcpp_result_gen = Rcpp::wrap(est_ability_cat_cpp(true_ability, cd, est_history, additional_args, last_estimate));
    return rcpp_result_gen;
END_RCPP
}
// terminate_cat_cpp
bool terminate_cat_cpp(Rcpp::List true_ability, Rcpp::List cd, Rcpp::List est_history, Rcpp::List additional_args);
RcppExport SEXP _irt_terminate_cat_cpp(SEXP true_abilitySEXP, SEXP cdSEXP, SEXP est_historySEXP, SEXP additional_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type true_ability(true_abilitySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type est_history(est_historySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type additional_args(additional_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(terminate_cat_cpp(true_ability, cd, est_history, additional_args));
    return rcpp_result_gen;
END_RCPP
}
// calculate_exposure_rates_cpp
Rcpp::NumericVector calculate_exposure_rates_cpp(Rcpp::StringVector item_ids, Rcpp::List cat_output_list);
RcppExport SEXP _irt_calculate_exposure_rates_cpp(SEXP item_idsSEXP, SEXP cat_output_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type item_ids(item_idsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cat_output_list(cat_output_listSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_exposure_rates_cpp(item_ids, cat_output_list));
    return rcpp_result_gen;
END_RCPP
}
// calculate_overlap_rates_cpp
Rcpp::NumericVector calculate_overlap_rates_cpp(Rcpp::StringVector item_ids, Rcpp::List cat_output_list);
RcppExport SEXP _irt_calculate_overlap_rates_cpp(SEXP item_idsSEXP, SEXP cat_output_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type item_ids(item_idsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cat_output_list(cat_output_listSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_overlap_rates_cpp(item_ids, cat_output_list));
    return rcpp_result_gen;
END_RCPP
}
// info_4pm_bare_cpp
double info_4pm_bare_cpp(double theta, Rcpp::S4 item);
RcppExport SEXP _irt_info_4pm_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(info_4pm_bare_cpp(theta, item));
    return rcpp_result_gen;
END_RCPP
}
// info_grm_bare_cpp
double info_grm_bare_cpp(double theta, Rcpp::S4 item);
RcppExport SEXP _irt_info_grm_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(info_grm_bare_cpp(theta, item));
    return rcpp_result_gen;
END_RCPP
}
// info_gpcm_bare_cpp
double info_gpcm_bare_cpp(double theta, Rcpp::S4 item);
RcppExport SEXP _irt_info_gpcm_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(info_gpcm_bare_cpp(theta, item));
    return rcpp_result_gen;
END_RCPP
}
// info_item_bare_cpp
double info_item_bare_cpp(double theta, Rcpp::S4 item, bool observed, double resp);
RcppExport SEXP _irt_info_item_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP, SEXP observedSEXP, SEXP respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< bool >::type observed(observedSEXP);
    Rcpp::traits::input_parameter< double >::type resp(respSEXP);
    rcpp_result_gen = Rcpp::wrap(info_item_bare_cpp(theta, item, observed, resp));
    return rcpp_result_gen;
END_RCPP
}
// info_testlet_bare_cpp
double info_testlet_bare_cpp(double theta, Rcpp::S4 testlet, bool observed, Rcpp::Nullable<Rcpp::NumericVector> resp);
RcppExport SEXP _irt_info_testlet_bare_cpp(SEXP thetaSEXP, SEXP testletSEXP, SEXP observedSEXP, SEXP respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type testlet(testletSEXP);
    Rcpp::traits::input_parameter< bool >::type observed(observedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type resp(respSEXP);
    rcpp_result_gen = Rcpp::wrap(info_testlet_bare_cpp(theta, testlet, observed, resp));
    return rcpp_result_gen;
END_RCPP
}
// info_item_cpp
Rcpp::NumericVector info_item_cpp(Rcpp::NumericVector theta, Rcpp::S4 item, bool observed, Rcpp::Nullable<Rcpp::NumericVector> resp);
RcppExport SEXP _irt_info_item_cpp(SEXP thetaSEXP, SEXP itemSEXP, SEXP observedSEXP, SEXP respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< bool >::type observed(observedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type resp(respSEXP);
    rcpp_result_gen = Rcpp::wrap(info_item_cpp(theta, item, observed, resp));
    return rcpp_result_gen;
END_RCPP
}
// info_itempool_bare_cpp
Rcpp::NumericVector info_itempool_bare_cpp(double theta, Rcpp::S4 ip, bool tif, bool observed, Rcpp::Nullable<Rcpp::NumericVector> resp);
RcppExport SEXP _irt_info_itempool_bare_cpp(SEXP thetaSEXP, SEXP ipSEXP, SEXP tifSEXP, SEXP observedSEXP, SEXP respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< bool >::type tif(tifSEXP);
    Rcpp::traits::input_parameter< bool >::type observed(observedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type resp(respSEXP);
    rcpp_result_gen = Rcpp::wrap(info_itempool_bare_cpp(theta, ip, tif, observed, resp));
    return rcpp_result_gen;
END_RCPP
}
// info_itempool_cpp
Rcpp::NumericMatrix info_itempool_cpp(Rcpp::NumericVector theta, Rcpp::S4 ip, bool tif, bool observed, Rcpp::Nullable<Rcpp::NumericMatrix> resp);
RcppExport SEXP _irt_info_itempool_cpp(SEXP thetaSEXP, SEXP ipSEXP, SEXP tifSEXP, SEXP observedSEXP, SEXP respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< bool >::type tif(tifSEXP);
    Rcpp::traits::input_parameter< bool >::type observed(observedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type resp(respSEXP);
    rcpp_result_gen = Rcpp::wrap(info_itempool_cpp(theta, ip, tif, observed, resp));
    return rcpp_result_gen;
END_RCPP
}
// info_response_cpp
Rcpp::NumericVector info_response_cpp(double theta, Rcpp::List ip_list, bool tif, bool observed, Rcpp::S4 resp);
RcppExport SEXP _irt_info_response_cpp(SEXP thetaSEXP, SEXP ip_listSEXP, SEXP tifSEXP, SEXP observedSEXP, SEXP respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ip_list(ip_listSEXP);
    Rcpp::traits::input_parameter< bool >::type tif(tifSEXP);
    Rcpp::traits::input_parameter< bool >::type observed(observedSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp(respSEXP);
    rcpp_result_gen = Rcpp::wrap(info_response_cpp(theta, ip_list, tif, observed, resp));
    return rcpp_result_gen;
END_RCPP
}
// info_response_set_cpp
Rcpp::NumericMatrix info_response_set_cpp(Rcpp::NumericVector theta, Rcpp::S4 ip, Rcpp::S4 resp_set, bool tif, bool observed);
RcppExport SEXP _irt_info_response_set_cpp(SEXP thetaSEXP, SEXP ipSEXP, SEXP resp_setSEXP, SEXP tifSEXP, SEXP observedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp_set(resp_setSEXP);
    Rcpp::traits::input_parameter< bool >::type tif(tifSEXP);
    Rcpp::traits::input_parameter< bool >::type observed(observedSEXP);
    rcpp_result_gen = Rcpp::wrap(info_response_set_cpp(theta, ip, resp_set, tif, observed));
    return rcpp_result_gen;
END_RCPP
}
// info_kl_item_bare_cpp
double info_kl_item_bare_cpp(Rcpp::NumericVector true_theta, Rcpp::NumericVector theta_hat, Rcpp::S4 item);
RcppExport SEXP _irt_info_kl_item_bare_cpp(SEXP true_thetaSEXP, SEXP theta_hatSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type true_theta(true_thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta_hat(theta_hatSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(info_kl_item_bare_cpp(true_theta, theta_hat, item));
    return rcpp_result_gen;
END_RCPP
}
// avg_rank
Rcpp::NumericVector avg_rank(Rcpp::NumericVector x);
RcppExport SEXP _irt_avg_rank(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(avg_rank(x));
    return rcpp_result_gen;
END_RCPP
}
// biserial_cpp
double biserial_cpp(Rcpp::NumericVector score, Rcpp::NumericVector criterion, std::string type);
RcppExport SEXP _irt_biserial_cpp(SEXP scoreSEXP, SEXP criterionSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type criterion(criterionSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(biserial_cpp(score, criterion, type));
    return rcpp_result_gen;
END_RCPP
}
// get_itempool_size
Rcpp::IntegerVector get_itempool_size(Rcpp::S4 ip);
RcppExport SEXP _irt_get_itempool_size(SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(get_itempool_size(ip));
    return rcpp_result_gen;
END_RCPP
}
// get_ids_itempool_cpp
Rcpp::StringVector get_ids_itempool_cpp(Rcpp::S4 ip);
RcppExport SEXP _irt_get_ids_itempool_cpp(SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ids_itempool_cpp(ip));
    return rcpp_result_gen;
END_RCPP
}
// get_item_ids_itempool_cpp
Rcpp::StringVector get_item_ids_itempool_cpp(Rcpp::S4 ip);
RcppExport SEXP _irt_get_item_ids_itempool_cpp(SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(get_item_ids_itempool_cpp(ip));
    return rcpp_result_gen;
END_RCPP
}
// get_testlet_ids_itempool_cpp
Rcpp::StringVector get_testlet_ids_itempool_cpp(Rcpp::S4 ip);
RcppExport SEXP _irt_get_testlet_ids_itempool_cpp(SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(get_testlet_ids_itempool_cpp(ip));
    return rcpp_result_gen;
END_RCPP
}
// get_slot_itempool_cpp
Rcpp::Nullable<Rcpp::StringVector> get_slot_itempool_cpp(Rcpp::S4 ip, std::string slotName);
RcppExport SEXP _irt_get_slot_itempool_cpp(SEXP ipSEXP, SEXP slotNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< std::string >::type slotName(slotNameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_slot_itempool_cpp(ip, slotName));
    return rcpp_result_gen;
END_RCPP
}
// get_parameters_itempool_cpp
Rcpp::NumericMatrix get_parameters_itempool_cpp(Rcpp::S4 ip);
RcppExport SEXP _irt_get_parameters_itempool_cpp(SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(get_parameters_itempool_cpp(ip));
    return rcpp_result_gen;
END_RCPP
}
// subset_itempool_cpp
Rcpp::S4 subset_itempool_cpp(Rcpp::S4 ip, Rcpp::List args);
RcppExport SEXP _irt_subset_itempool_cpp(SEXP ipSEXP, SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_itempool_cpp(ip, args));
    return rcpp_result_gen;
END_RCPP
}
// flatten_itempool_cpp
Rcpp::List flatten_itempool_cpp(Rcpp::S4 ip);
RcppExport SEXP _irt_flatten_itempool_cpp(SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(flatten_itempool_cpp(ip));
    return rcpp_result_gen;
END_RCPP
}
// get_max_possible_score_item_cpp
int get_max_possible_score_item_cpp(Rcpp::S4 item);
RcppExport SEXP _irt_get_max_possible_score_item_cpp(SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(get_max_possible_score_item_cpp(item));
    return rcpp_result_gen;
END_RCPP
}
// get_max_possible_score_itempool_cpp
Rcpp::NumericVector get_max_possible_score_itempool_cpp(Rcpp::S4 ip);
RcppExport SEXP _irt_get_max_possible_score_itempool_cpp(SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(get_max_possible_score_itempool_cpp(ip));
    return rcpp_result_gen;
END_RCPP
}
// integrate
double integrate(Rcpp::NumericVector x, Rcpp::NumericVector fx);
RcppExport SEXP _irt_integrate(SEXP xSEXP, SEXP fxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fx(fxSEXP);
    rcpp_result_gen = Rcpp::wrap(integrate(x, fx));
    return rcpp_result_gen;
END_RCPP
}
// check_item_model
bool check_item_model(Rcpp::S4 item, bool is_dichotomous, bool is_unidimensional);
RcppExport SEXP _irt_check_item_model(SEXP itemSEXP, SEXP is_dichotomousSEXP, SEXP is_unidimensionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< bool >::type is_dichotomous(is_dichotomousSEXP);
    Rcpp::traits::input_parameter< bool >::type is_unidimensional(is_unidimensionalSEXP);
    rcpp_result_gen = Rcpp::wrap(check_item_model(item, is_dichotomous, is_unidimensional));
    return rcpp_result_gen;
END_RCPP
}
// lz_response_cpp
double lz_response_cpp(Rcpp::S4 resp, double theta, Rcpp::List ip_list);
RcppExport SEXP _irt_lz_response_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP ip_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ip_list(ip_listSEXP);
    rcpp_result_gen = Rcpp::wrap(lz_response_cpp(resp, theta, ip_list));
    return rcpp_result_gen;
END_RCPP
}
// lz_response_set_cpp
Rcpp::NumericVector lz_response_set_cpp(Rcpp::S4 resp_set, Rcpp::NumericVector theta, Rcpp::S4 ip);
RcppExport SEXP _irt_lz_response_set_cpp(SEXP resp_setSEXP, SEXP thetaSEXP, SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp_set(resp_setSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(lz_response_set_cpp(resp_set, theta, ip));
    return rcpp_result_gen;
END_RCPP
}
// prob_4pm_bare_cpp
double prob_4pm_bare_cpp(double theta, Rcpp::S4 item, int derivative, double resp);
RcppExport SEXP _irt_prob_4pm_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP, SEXP derivativeSEXP, SEXP respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    Rcpp::traits::input_parameter< double >::type resp(respSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_4pm_bare_cpp(theta, item, derivative, resp));
    return rcpp_result_gen;
END_RCPP
}
// prob_4pm_item_cpp
Rcpp::NumericVector prob_4pm_item_cpp(NumericVector theta, Rcpp::S4 item, int derivative);
RcppExport SEXP _irt_prob_4pm_item_cpp(SEXP thetaSEXP, SEXP itemSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_4pm_item_cpp(theta, item, derivative));
    return rcpp_result_gen;
END_RCPP
}
// prob_4pm_itempool_cpp
Rcpp::NumericMatrix prob_4pm_itempool_cpp(NumericVector theta, Rcpp::S4 ip, int derivative);
RcppExport SEXP _irt_prob_4pm_itempool_cpp(SEXP thetaSEXP, SEXP ipSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_4pm_itempool_cpp(theta, ip, derivative));
    return rcpp_result_gen;
END_RCPP
}
// prob_grm_bare_cpp
Rcpp::NumericVector prob_grm_bare_cpp(double theta, Rcpp::S4 item, int derivative);
RcppExport SEXP _irt_prob_grm_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_grm_bare_cpp(theta, item, derivative));
    return rcpp_result_gen;
END_RCPP
}
// prob_gpcm_bare_cpp
Rcpp::NumericVector prob_gpcm_bare_cpp(double theta, Rcpp::S4 item, int derivative, double resp);
RcppExport SEXP _irt_prob_gpcm_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP, SEXP derivativeSEXP, SEXP respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    Rcpp::traits::input_parameter< double >::type resp(respSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_gpcm_bare_cpp(theta, item, derivative, resp));
    return rcpp_result_gen;
END_RCPP
}
// prob_poly_bare_cpp
Rcpp::NumericVector prob_poly_bare_cpp(double theta, Rcpp::S4 item, int derivative, double resp, bool expected_value);
RcppExport SEXP _irt_prob_poly_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP, SEXP derivativeSEXP, SEXP respSEXP, SEXP expected_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    Rcpp::traits::input_parameter< double >::type resp(respSEXP);
    Rcpp::traits::input_parameter< bool >::type expected_value(expected_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_poly_bare_cpp(theta, item, derivative, resp, expected_value));
    return rcpp_result_gen;
END_RCPP
}
// prob_mirt_bare_cpp
double prob_mirt_bare_cpp(Rcpp::NumericVector theta, Rcpp::S4 item, int derivative);
RcppExport SEXP _irt_prob_mirt_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_mirt_bare_cpp(theta, item, derivative));
    return rcpp_result_gen;
END_RCPP
}
// prob_mirt_item_cpp
Rcpp::NumericVector prob_mirt_item_cpp(Rcpp::NumericMatrix theta, Rcpp::S4 item, int derivative);
RcppExport SEXP _irt_prob_mirt_item_cpp(SEXP thetaSEXP, SEXP itemSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_mirt_item_cpp(theta, item, derivative));
    return rcpp_result_gen;
END_RCPP
}
// prob_mirt_itempool_cpp
Rcpp::NumericMatrix prob_mirt_itempool_cpp(Rcpp::NumericMatrix theta, Rcpp::S4 ip, int derivative);
RcppExport SEXP _irt_prob_mirt_itempool_cpp(SEXP thetaSEXP, SEXP ipSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_mirt_itempool_cpp(theta, ip, derivative));
    return rcpp_result_gen;
END_RCPP
}
// prob_bare_item_cpp
Rcpp::NumericVector prob_bare_item_cpp(Rcpp::NumericVector theta, Rcpp::S4 item, int derivative, double resp, bool expected_value);
RcppExport SEXP _irt_prob_bare_item_cpp(SEXP thetaSEXP, SEXP itemSEXP, SEXP derivativeSEXP, SEXP respSEXP, SEXP expected_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    Rcpp::traits::input_parameter< double >::type resp(respSEXP);
    Rcpp::traits::input_parameter< bool >::type expected_value(expected_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_bare_item_cpp(theta, item, derivative, resp, expected_value));
    return rcpp_result_gen;
END_RCPP
}
// prob_bare_itempool_cpp
Rcpp::NumericMatrix prob_bare_itempool_cpp(Rcpp::NumericVector theta, Rcpp::S4 ip, int derivative, bool expected_value);
RcppExport SEXP _irt_prob_bare_itempool_cpp(SEXP thetaSEXP, SEXP ipSEXP, SEXP derivativeSEXP, SEXP expected_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    Rcpp::traits::input_parameter< bool >::type expected_value(expected_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_bare_itempool_cpp(theta, ip, derivative, expected_value));
    return rcpp_result_gen;
END_RCPP
}
// resp_lik_bare_item_cpp
double resp_lik_bare_item_cpp(double resp, double theta, Rcpp::S4 item);
RcppExport SEXP _irt_resp_lik_bare_item_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_lik_bare_item_cpp(resp, theta, item));
    return rcpp_result_gen;
END_RCPP
}
// resp_lik_item_cpp
Rcpp::NumericVector resp_lik_item_cpp(Rcpp::NumericVector resp, Rcpp::NumericVector theta, Rcpp::S4 item);
RcppExport SEXP _irt_resp_lik_item_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_lik_item_cpp(resp, theta, item));
    return rcpp_result_gen;
END_RCPP
}
// resp_lik_bare_testlet_cpp
double resp_lik_bare_testlet_cpp(Rcpp::NumericVector resp, double theta, Rcpp::S4 testlet);
RcppExport SEXP _irt_resp_lik_bare_testlet_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP testletSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type testlet(testletSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_lik_bare_testlet_cpp(resp, theta, testlet));
    return rcpp_result_gen;
END_RCPP
}
// resp_lik_testlet_cpp
Rcpp::NumericVector resp_lik_testlet_cpp(Rcpp::NumericMatrix resp, Rcpp::NumericVector theta, Rcpp::S4 testlet);
RcppExport SEXP _irt_resp_lik_testlet_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP testletSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type testlet(testletSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_lik_testlet_cpp(resp, theta, testlet));
    return rcpp_result_gen;
END_RCPP
}
// resp_lik_bare_itempool_cpp
double resp_lik_bare_itempool_cpp(Rcpp::NumericVector resp, double theta, Rcpp::S4 ip);
RcppExport SEXP _irt_resp_lik_bare_itempool_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_lik_bare_itempool_cpp(resp, theta, ip));
    return rcpp_result_gen;
END_RCPP
}
// resp_lik_itempool_cpp
Rcpp::NumericVector resp_lik_itempool_cpp(Rcpp::NumericMatrix resp, Rcpp::NumericVector theta, Rcpp::S4 ip);
RcppExport SEXP _irt_resp_lik_itempool_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_lik_itempool_cpp(resp, theta, ip));
    return rcpp_result_gen;
END_RCPP
}
// resp_lik_response_cpp
double resp_lik_response_cpp(double theta, Rcpp::S4 resp, Rcpp::S4 ip);
RcppExport SEXP _irt_resp_lik_response_cpp(SEXP thetaSEXP, SEXP respSEXP, SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_lik_response_cpp(theta, resp, ip));
    return rcpp_result_gen;
END_RCPP
}
// resp_lik_response_set_cpp
Rcpp::NumericVector resp_lik_response_set_cpp(Rcpp::S4 resp_set, Rcpp::NumericVector theta, Rcpp::S4 ip);
RcppExport SEXP _irt_resp_lik_response_set_cpp(SEXP resp_setSEXP, SEXP thetaSEXP, SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp_set(resp_setSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_lik_response_set_cpp(resp_set, theta, ip));
    return rcpp_result_gen;
END_RCPP
}
// resp_loglik_bare_item_cpp
double resp_loglik_bare_item_cpp(double resp, double theta, Rcpp::S4 item, int derivative);
RcppExport SEXP _irt_resp_loglik_bare_item_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP itemSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_loglik_bare_item_cpp(resp, theta, item, derivative));
    return rcpp_result_gen;
END_RCPP
}
// resp_loglik_item_cpp
Rcpp::NumericVector resp_loglik_item_cpp(Rcpp::NumericVector resp, Rcpp::NumericVector theta, Rcpp::S4 item, int derivative);
RcppExport SEXP _irt_resp_loglik_item_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP itemSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_loglik_item_cpp(resp, theta, item, derivative));
    return rcpp_result_gen;
END_RCPP
}
// resp_loglik_btm_integral_cpp
double resp_loglik_btm_integral_cpp(double u, double mu, double sigma, Rcpp::NumericVector resp, double theta, Rcpp::List& item_list);
RcppExport SEXP _irt_resp_loglik_btm_integral_cpp(SEXP uSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP respSEXP, SEXP thetaSEXP, SEXP item_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type item_list(item_listSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_loglik_btm_integral_cpp(u, mu, sigma, resp, theta, item_list));
    return rcpp_result_gen;
END_RCPP
}
// resp_loglik_bare_testlet_cpp
double resp_loglik_bare_testlet_cpp(Rcpp::NumericVector resp, double theta, Rcpp::S4& testlet, int derivative);
RcppExport SEXP _irt_resp_loglik_bare_testlet_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP testletSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type testlet(testletSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_loglik_bare_testlet_cpp(resp, theta, testlet, derivative));
    return rcpp_result_gen;
END_RCPP
}
// resp_loglik_testlet_cpp
Rcpp::NumericVector resp_loglik_testlet_cpp(Rcpp::NumericMatrix resp, Rcpp::NumericVector theta, Rcpp::S4 testlet, int derivative);
RcppExport SEXP _irt_resp_loglik_testlet_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP testletSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type testlet(testletSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_loglik_testlet_cpp(resp, theta, testlet, derivative));
    return rcpp_result_gen;
END_RCPP
}
// resp_loglik_bare_itempool_cpp
double resp_loglik_bare_itempool_cpp(Rcpp::NumericVector resp, double theta, Rcpp::S4 ip, int derivative);
RcppExport SEXP _irt_resp_loglik_bare_itempool_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP ipSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_loglik_bare_itempool_cpp(resp, theta, ip, derivative));
    return rcpp_result_gen;
END_RCPP
}
// resp_loglik_itempool_cpp
Rcpp::NumericVector resp_loglik_itempool_cpp(Rcpp::NumericMatrix resp, Rcpp::NumericVector theta, Rcpp::S4 ip, int derivative);
RcppExport SEXP _irt_resp_loglik_itempool_cpp(SEXP respSEXP, SEXP thetaSEXP, SEXP ipSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_loglik_itempool_cpp(resp, theta, ip, derivative));
    return rcpp_result_gen;
END_RCPP
}
// resp_loglik_response_cpp
double resp_loglik_response_cpp(double theta, Rcpp::S4& resp, Rcpp::S4& ip, int derivative);
RcppExport SEXP _irt_resp_loglik_response_cpp(SEXP thetaSEXP, SEXP respSEXP, SEXP ipSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type resp(respSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_loglik_response_cpp(theta, resp, ip, derivative));
    return rcpp_result_gen;
END_RCPP
}
// resp_loglik_response_set_cpp
Rcpp::NumericVector resp_loglik_response_set_cpp(Rcpp::S4 resp_set, Rcpp::NumericVector theta, Rcpp::S4 ip, int derivative);
RcppExport SEXP _irt_resp_loglik_response_set_cpp(SEXP resp_setSEXP, SEXP thetaSEXP, SEXP ipSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp_set(resp_setSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_loglik_response_set_cpp(resp_set, theta, ip, derivative));
    return rcpp_result_gen;
END_RCPP
}
// check_validity_response_set_cpp
bool check_validity_response_set_cpp(Rcpp::S4 resp_set, Rcpp::S4 ip);
RcppExport SEXP _irt_check_validity_response_set_cpp(SEXP resp_setSEXP, SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp_set(resp_setSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(check_validity_response_set_cpp(resp_set, ip));
    return rcpp_result_gen;
END_RCPP
}
// get_examinee_id_response_set_cpp
Rcpp::Nullable<Rcpp::StringVector> get_examinee_id_response_set_cpp(Rcpp::S4 resp_set);
RcppExport SEXP _irt_get_examinee_id_response_set_cpp(SEXP resp_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp_set(resp_setSEXP);
    rcpp_result_gen = Rcpp::wrap(get_examinee_id_response_set_cpp(resp_set));
    return rcpp_result_gen;
END_RCPP
}
// max_score_response_set_cpp
Rcpp::NumericVector max_score_response_set_cpp(Rcpp::S4 resp_set, Rcpp::S4 ip);
RcppExport SEXP _irt_max_score_response_set_cpp(SEXP resp_setSEXP, SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type resp_set(resp_setSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(max_score_response_set_cpp(resp_set, ip));
    return rcpp_result_gen;
END_RCPP
}
// sim_resp_4pm_bare_cpp
int sim_resp_4pm_bare_cpp(double theta, Rcpp::S4 item);
RcppExport SEXP _irt_sim_resp_4pm_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_resp_4pm_bare_cpp(theta, item));
    return rcpp_result_gen;
END_RCPP
}
// sim_resp_poly_bare_cpp
int sim_resp_poly_bare_cpp(double theta, Rcpp::S4 item);
RcppExport SEXP _irt_sim_resp_poly_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_resp_poly_bare_cpp(theta, item));
    return rcpp_result_gen;
END_RCPP
}
// sim_resp_bare_cpp
int sim_resp_bare_cpp(double theta, Rcpp::S4 item);
RcppExport SEXP _irt_sim_resp_bare_cpp(SEXP thetaSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_resp_bare_cpp(theta, item));
    return rcpp_result_gen;
END_RCPP
}
// sim_resp_response_cpp
Rcpp::S4 sim_resp_response_cpp(double theta, Rcpp::S4 ip, Rcpp::StringVector examinee_id, Rcpp::NumericVector ip_size, double prop_missing);
RcppExport SEXP _irt_sim_resp_response_cpp(SEXP thetaSEXP, SEXP ipSEXP, SEXP examinee_idSEXP, SEXP ip_sizeSEXP, SEXP prop_missingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type examinee_id(examinee_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ip_size(ip_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type prop_missing(prop_missingSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_resp_response_cpp(theta, ip, examinee_id, ip_size, prop_missing));
    return rcpp_result_gen;
END_RCPP
}
// sim_resp_response_set_cpp
Rcpp::S4 sim_resp_response_set_cpp(Rcpp::NumericVector theta, Rcpp::S4 ip, Rcpp::StringVector examinee_id, double prop_missing);
RcppExport SEXP _irt_sim_resp_response_set_cpp(SEXP thetaSEXP, SEXP ipSEXP, SEXP examinee_idSEXP, SEXP prop_missingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type ip(ipSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type examinee_id(examinee_idSEXP);
    Rcpp::traits::input_parameter< double >::type prop_missing(prop_missingSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_resp_response_set_cpp(theta, ip, examinee_id, prop_missing));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_irt_est_ability_4pm_nr_itempool_cpp", (DL_FUNC) &_irt_est_ability_4pm_nr_itempool_cpp, 5},
    {"_irt_est_ability_4pm_nr_response_cpp", (DL_FUNC) &_irt_est_ability_4pm_nr_response_cpp, 5},
    {"_irt_est_ability_eap_single_examinee_cpp", (DL_FUNC) &_irt_est_ability_eap_single_examinee_cpp, 6},
    {"_irt_est_ability_eap_cpp", (DL_FUNC) &_irt_est_ability_eap_cpp, 6},
    {"_irt_est_ability_eap_response_set_cpp", (DL_FUNC) &_irt_est_ability_eap_response_set_cpp, 6},
    {"_irt_est_ability_owen_item_cpp", (DL_FUNC) &_irt_est_ability_owen_item_cpp, 4},
    {"_irt_est_ability_owen_cpp", (DL_FUNC) &_irt_est_ability_owen_cpp, 4},
    {"_irt_est_ability_optim_response_cpp", (DL_FUNC) &_irt_est_ability_optim_response_cpp, 4},
    {"_irt_get_remaining_items", (DL_FUNC) &_irt_get_remaining_items, 3},
    {"_irt_get_administered_items_cpp", (DL_FUNC) &_irt_get_administered_items_cpp, 1},
    {"_irt_get_response_categories", (DL_FUNC) &_irt_get_response_categories, 1},
    {"_irt_loglik_est_history", (DL_FUNC) &_irt_loglik_est_history, 3},
    {"_irt_select_next_item_fisher_max_info_cpp", (DL_FUNC) &_irt_select_next_item_fisher_max_info_cpp, 3},
    {"_irt_select_next_item_fmi_cpp", (DL_FUNC) &_irt_select_next_item_fmi_cpp, 3},
    {"_irt_calculate_epv_cpp", (DL_FUNC) &_irt_calculate_epv_cpp, 8},
    {"_irt_select_next_item_mepv_cpp", (DL_FUNC) &_irt_select_next_item_mepv_cpp, 3},
    {"_irt_apply_exposure_control_cpp", (DL_FUNC) &_irt_apply_exposure_control_cpp, 4},
    {"_irt_select_next_item_cpp", (DL_FUNC) &_irt_select_next_item_cpp, 3},
    {"_irt_cat_sim_single_cpp", (DL_FUNC) &_irt_cat_sim_single_cpp, 2},
    {"_irt_cat_sim_cpp", (DL_FUNC) &_irt_cat_sim_cpp, 3},
    {"_irt_generate_cat_resp_cpp", (DL_FUNC) &_irt_generate_cat_resp_cpp, 4},
    {"_irt_est_ability_cat_cpp", (DL_FUNC) &_irt_est_ability_cat_cpp, 5},
    {"_irt_terminate_cat_cpp", (DL_FUNC) &_irt_terminate_cat_cpp, 4},
    {"_irt_calculate_exposure_rates_cpp", (DL_FUNC) &_irt_calculate_exposure_rates_cpp, 2},
    {"_irt_calculate_overlap_rates_cpp", (DL_FUNC) &_irt_calculate_overlap_rates_cpp, 2},
    {"_irt_info_4pm_bare_cpp", (DL_FUNC) &_irt_info_4pm_bare_cpp, 2},
    {"_irt_info_grm_bare_cpp", (DL_FUNC) &_irt_info_grm_bare_cpp, 2},
    {"_irt_info_gpcm_bare_cpp", (DL_FUNC) &_irt_info_gpcm_bare_cpp, 2},
    {"_irt_info_item_bare_cpp", (DL_FUNC) &_irt_info_item_bare_cpp, 4},
    {"_irt_info_testlet_bare_cpp", (DL_FUNC) &_irt_info_testlet_bare_cpp, 4},
    {"_irt_info_item_cpp", (DL_FUNC) &_irt_info_item_cpp, 4},
    {"_irt_info_itempool_bare_cpp", (DL_FUNC) &_irt_info_itempool_bare_cpp, 5},
    {"_irt_info_itempool_cpp", (DL_FUNC) &_irt_info_itempool_cpp, 5},
    {"_irt_info_response_cpp", (DL_FUNC) &_irt_info_response_cpp, 5},
    {"_irt_info_response_set_cpp", (DL_FUNC) &_irt_info_response_set_cpp, 5},
    {"_irt_info_kl_item_bare_cpp", (DL_FUNC) &_irt_info_kl_item_bare_cpp, 3},
    {"_irt_avg_rank", (DL_FUNC) &_irt_avg_rank, 1},
    {"_irt_biserial_cpp", (DL_FUNC) &_irt_biserial_cpp, 3},
    {"_irt_get_itempool_size", (DL_FUNC) &_irt_get_itempool_size, 1},
    {"_irt_get_ids_itempool_cpp", (DL_FUNC) &_irt_get_ids_itempool_cpp, 1},
    {"_irt_get_item_ids_itempool_cpp", (DL_FUNC) &_irt_get_item_ids_itempool_cpp, 1},
    {"_irt_get_testlet_ids_itempool_cpp", (DL_FUNC) &_irt_get_testlet_ids_itempool_cpp, 1},
    {"_irt_get_slot_itempool_cpp", (DL_FUNC) &_irt_get_slot_itempool_cpp, 2},
    {"_irt_get_parameters_itempool_cpp", (DL_FUNC) &_irt_get_parameters_itempool_cpp, 1},
    {"_irt_subset_itempool_cpp", (DL_FUNC) &_irt_subset_itempool_cpp, 2},
    {"_irt_flatten_itempool_cpp", (DL_FUNC) &_irt_flatten_itempool_cpp, 1},
    {"_irt_get_max_possible_score_item_cpp", (DL_FUNC) &_irt_get_max_possible_score_item_cpp, 1},
    {"_irt_get_max_possible_score_itempool_cpp", (DL_FUNC) &_irt_get_max_possible_score_itempool_cpp, 1},
    {"_irt_integrate", (DL_FUNC) &_irt_integrate, 2},
    {"_irt_check_item_model", (DL_FUNC) &_irt_check_item_model, 3},
    {"_irt_lz_response_cpp", (DL_FUNC) &_irt_lz_response_cpp, 3},
    {"_irt_lz_response_set_cpp", (DL_FUNC) &_irt_lz_response_set_cpp, 3},
    {"_irt_prob_4pm_bare_cpp", (DL_FUNC) &_irt_prob_4pm_bare_cpp, 4},
    {"_irt_prob_4pm_item_cpp", (DL_FUNC) &_irt_prob_4pm_item_cpp, 3},
    {"_irt_prob_4pm_itempool_cpp", (DL_FUNC) &_irt_prob_4pm_itempool_cpp, 3},
    {"_irt_prob_grm_bare_cpp", (DL_FUNC) &_irt_prob_grm_bare_cpp, 3},
    {"_irt_prob_gpcm_bare_cpp", (DL_FUNC) &_irt_prob_gpcm_bare_cpp, 4},
    {"_irt_prob_poly_bare_cpp", (DL_FUNC) &_irt_prob_poly_bare_cpp, 5},
    {"_irt_prob_mirt_bare_cpp", (DL_FUNC) &_irt_prob_mirt_bare_cpp, 3},
    {"_irt_prob_mirt_item_cpp", (DL_FUNC) &_irt_prob_mirt_item_cpp, 3},
    {"_irt_prob_mirt_itempool_cpp", (DL_FUNC) &_irt_prob_mirt_itempool_cpp, 3},
    {"_irt_prob_bare_item_cpp", (DL_FUNC) &_irt_prob_bare_item_cpp, 5},
    {"_irt_prob_bare_itempool_cpp", (DL_FUNC) &_irt_prob_bare_itempool_cpp, 4},
    {"_irt_resp_lik_bare_item_cpp", (DL_FUNC) &_irt_resp_lik_bare_item_cpp, 3},
    {"_irt_resp_lik_item_cpp", (DL_FUNC) &_irt_resp_lik_item_cpp, 3},
    {"_irt_resp_lik_bare_testlet_cpp", (DL_FUNC) &_irt_resp_lik_bare_testlet_cpp, 3},
    {"_irt_resp_lik_testlet_cpp", (DL_FUNC) &_irt_resp_lik_testlet_cpp, 3},
    {"_irt_resp_lik_bare_itempool_cpp", (DL_FUNC) &_irt_resp_lik_bare_itempool_cpp, 3},
    {"_irt_resp_lik_itempool_cpp", (DL_FUNC) &_irt_resp_lik_itempool_cpp, 3},
    {"_irt_resp_lik_response_cpp", (DL_FUNC) &_irt_resp_lik_response_cpp, 3},
    {"_irt_resp_lik_response_set_cpp", (DL_FUNC) &_irt_resp_lik_response_set_cpp, 3},
    {"_irt_resp_loglik_bare_item_cpp", (DL_FUNC) &_irt_resp_loglik_bare_item_cpp, 4},
    {"_irt_resp_loglik_item_cpp", (DL_FUNC) &_irt_resp_loglik_item_cpp, 4},
    {"_irt_resp_loglik_btm_integral_cpp", (DL_FUNC) &_irt_resp_loglik_btm_integral_cpp, 6},
    {"_irt_resp_loglik_bare_testlet_cpp", (DL_FUNC) &_irt_resp_loglik_bare_testlet_cpp, 4},
    {"_irt_resp_loglik_testlet_cpp", (DL_FUNC) &_irt_resp_loglik_testlet_cpp, 4},
    {"_irt_resp_loglik_bare_itempool_cpp", (DL_FUNC) &_irt_resp_loglik_bare_itempool_cpp, 4},
    {"_irt_resp_loglik_itempool_cpp", (DL_FUNC) &_irt_resp_loglik_itempool_cpp, 4},
    {"_irt_resp_loglik_response_cpp", (DL_FUNC) &_irt_resp_loglik_response_cpp, 4},
    {"_irt_resp_loglik_response_set_cpp", (DL_FUNC) &_irt_resp_loglik_response_set_cpp, 4},
    {"_irt_check_validity_response_set_cpp", (DL_FUNC) &_irt_check_validity_response_set_cpp, 2},
    {"_irt_get_examinee_id_response_set_cpp", (DL_FUNC) &_irt_get_examinee_id_response_set_cpp, 1},
    {"_irt_max_score_response_set_cpp", (DL_FUNC) &_irt_max_score_response_set_cpp, 2},
    {"_irt_sim_resp_4pm_bare_cpp", (DL_FUNC) &_irt_sim_resp_4pm_bare_cpp, 2},
    {"_irt_sim_resp_poly_bare_cpp", (DL_FUNC) &_irt_sim_resp_poly_bare_cpp, 2},
    {"_irt_sim_resp_bare_cpp", (DL_FUNC) &_irt_sim_resp_bare_cpp, 2},
    {"_irt_sim_resp_response_cpp", (DL_FUNC) &_irt_sim_resp_response_cpp, 5},
    {"_irt_sim_resp_response_set_cpp", (DL_FUNC) &_irt_sim_resp_response_set_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_irt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
